
Hi Peter,

when we first got the starlight express camera, we set it up under Fedora
Core 21 using code called GoQat which I retrieved from

http://canburytech.net/GoQat/index.html

It comes as source, and if memory serves is all in C++.
Under linux, there are no camera specific drivers to load, though you need 
a bunch of reasonably standard libraries and a few applications to be installed
when you compiled the code.  They appear to have gotten access to
the usb command set for the camera, and implemented it as a usb device.
I've attached my notes (allsky_setup.txt) about what it originally took me 
to get GoQat 1.0.3 up under FC21. They are just for reference really, but it was
reasonably straightforward.
At the time, I was using version 1.0.3 (where I think was the last 1.x rev.).
They recently released version 2.0.  The two cameras we have running under 
GoQat both started with version 1.0.3.  In both cases, they handle control of the
camera from other applications by going through the GoQat scripting
interface.  The GoQat authors document the syntax reasonably well in 
the user manual.

The first case we have is the slit viewing camera for a spectrograph.  In that
case, the external application is home written IDL code that requests images
from GoQat.  I believe we also wrote a short shell script to handle making
sure the usb device line was rwx for the application trying to access the camera.
That camera is still running under GoQat 1.0.3.  There were the intermittent
code crashes when they first tried to let it free run in guide mode.  I think
that currently they use it in single frame per script request, but I am not sure. I
have not heard any recent issues with it, and the spectrograph is getting used
reasonably regularly.

The second case is the all sky camera.  That one also started with GoQat 1.0.3,
but the person I turned it over to (Len Bright, lpb@lowell.edu) ran into instabilities 
and just recently upgraded to GoQat 2.0.  He says that it is much more stable and 
the crashes he was seeing have stopped.  He is running the camera also through 
the scripting interface from python code.

I'd be interested in hearing how your all sky network progresses.

I hope this is some help.

Best regards,
 Stephen











2015 Feb

Mesa All Sky Camera setup notes:
--------------------------------
On allsky.lowell.edu
1) Len installed a vanilla version of Fedora Core 21
2) GoQat:
 a) I imported the goqat-1.0.3.tar.gz from canburytech.net/GoQat
 b) tar xvfz goqat-1.0.3.tar.gz
 c) Install a bunch of stuff that GoQat will need to compile:

 As root:
 g++ - prompts to install:
    gcc-c++  which needs
    libstdc++-devel-4.9.2-1.fc21..x86_64

 Already Installed:
 pkgconfig, gawk, gtk2, libXt-devel

 Install:
 yum install tcsh autogen (gc, guile)

 yum install libstdc++-devel-4.9.2-1.fc21.x86_64
 yum install gcc-c++
 yum install gtk2-devel
 yum install libusb-devel
 yum install libv4l-devel
 yum install goocanvas-devel (goocanvas)
 yum install libudev-devel (gets systemd-devel)
 yum install libraw1394-devel
 yum install xpa-devel xpa
 yum install saoimage
 yum install grace grace-devel
 yum install libunicapgtk-devel

 Mods to get it to compile:
 d) fedora puts xpa headers in /usr/include/xpa/, instead of /usr/include
 e) /usr/include/xpa/xpa.h change #include <prsetup.h> to <xpa/prsetup.h>
    src/image.c - change #include <xpa.h> to #include <xpa/xpa.h>

 f) ./configure
 g) make
 h) sudo make install
    This installs everything under /usr/local/ by default.

3) SAO DS9: Download ds9 from ds9.si.edu/site/Download.html
   tar xvfz ds9*.gz
   sudo mv ds9 /usr/local/bin

   install libXss for ds9
     yum install libXScrnSaver

4) Plug in the Oculus camera to a usb port.  
   The camera will show up on /dev/bus/usb/00M/0NN and the permission
   will need to be made world readable

   csh> sudo chmod 0666 `lsusb | grep Starlight | sed -e 's/://' |\
        awk '{print "/dev/bus/usb/"$2"/"$4}' -`

5) yum install tigervnc-server


